{"version":3,"sources":["Components/Window.js","Context/EditorTextContext.js","data/intial.js","Components/Editor.js","Components/Preview.js","App.js","index.js"],"names":["Window","props","className","name","content","EditorTextContext","createContext","EditorTextContextProvider","useState","text","setText","Provider","value","children","backTick","initial","Editor","context","useContext","useEffect","id","onChange","e","target","defaultValue","renderer","code","snippet","lang","language","style","a11yDark","Preview","breaks","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uKAWeA,MATf,SAAgBC,GACd,OACE,sBAAKC,UAAU,SAAf,UACE,qBAAKA,UAAU,gBAAf,SAAgCD,EAAME,OACrCF,EAAMG,Y,QCJAC,EAAoBC,wBAAc,IAUhCC,MARf,SAAmCN,GACjC,MAAwBO,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACA,OACE,cAACL,EAAkBM,SAAnB,CAA4BC,MAAO,CAAEH,OAAMC,WAA3C,SACGT,EAAMY,YCRPC,EAAW,MACbC,EAAO,kHAIXA,GAAW,yDACXA,GAAO,UAAOD,EAAP,kHAIeA,EAJf,6BAI4CA,EAJ5C,oDAQLA,EARK,MAoCQC,MA3BfA,GAAO,8zB,MCOQC,MAjBf,SAAgBf,GACd,IAAMgB,EAAUC,qBAAWb,GAO3B,OAHAc,qBAAU,WACRF,EAAQP,QAAQK,KACf,IAED,0BACEK,GAAG,SACHC,SATkB,SAACC,GACrBL,EAAQP,QAAQY,EAAEC,OAAOX,QASvBY,aAAcP,EAAQR,Q,0BCVtBgB,G,MAAW,CACfC,KAAM,SAACC,EAASC,GACd,OACE,cAAC,IAAD,CAAmBC,SAAUD,EAAME,MAAOC,IAA1C,SACGJ,OAmBMK,MAbf,SAAiB/B,GACf,IAAMgB,EAAUC,qBAAWb,GAC3B,OACE,qBAAKe,GAAG,UAAR,SACE,cAAC,IAAD,CACEa,QAAQ,EACRrB,MAAOK,EAAQR,KACfgB,SAAUA,OCPHS,MAXf,WACE,OACE,cAAC,EAAD,UACE,sBAAKhC,UAAU,MAAf,UACE,cAAC,EAAD,CAAQC,KAAK,SAASC,QAAS,cAAC,EAAD,MAC/B,cAAC,EAAD,CAAQD,KAAK,UAAUC,QAAS,cAAC,EAAD,YCNxC+B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.7ae431a1.chunk.js","sourcesContent":["import '../styles/window.css';\r\n\r\nfunction Window(props) {\r\n  return (\r\n    <div className=\"window\">\r\n      <div className=\"window-header\">{props.name}</div>\r\n      {props.content}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Window;\r\n","import { createContext, useState } from 'react';\r\n\r\nexport const EditorTextContext = createContext('');\r\n\r\nfunction EditorTextContextProvider(props) {\r\n  const [text, setText] = useState();\r\n  return (\r\n    <EditorTextContext.Provider value={{ text, setText }}>\r\n      {props.children}\r\n    </EditorTextContext.Provider>\r\n  );\r\n}\r\nexport default EditorTextContextProvider;\r\n","const backTick = '```';\r\nlet initial = `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:`;\r\ninitial += 'Heres some code, `<div></div>`, between 2 backticks.\\n';\r\ninitial += `${backTick}js\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '${backTick}' && lastLine == '${backTick}') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n${backTick}\\n`;\r\ninitial += `  You can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.org), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | -------------\r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbered lists too.\r\n1. Use just 1s if you want!\r\n1. And last but not least, let's not forget embedded images:\r\n\r\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)`;\r\n\r\nexport default initial;\r\n","import { useContext, useEffect } from 'react';\r\nimport { EditorTextContext } from '../Context/EditorTextContext';\r\nimport initial from '../data/intial';\r\nimport '../styles/editor.css';\r\n\r\nfunction Editor(props) {\r\n  const context = useContext(EditorTextContext);\r\n  const onTextChanges = (e) => {\r\n    context.setText(e.target.value);\r\n  };\r\n  useEffect(() => {\r\n    context.setText(initial);\r\n  }, []);\r\n  return (\r\n    <textarea\r\n      id=\"editor\"\r\n      onChange={onTextChanges}\r\n      defaultValue={context.text}\r\n    ></textarea>\r\n  );\r\n}\r\n\r\nexport default Editor;\r\n","import { useContext } from 'react';\r\nimport { EditorTextContext } from '../Context/EditorTextContext';\r\nimport Markdown from 'marked-react';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { a11yDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\nimport '../styles/preview.css';\r\n\r\nconst renderer = {\r\n  code: (snippet, lang) => {\r\n    return (\r\n      <SyntaxHighlighter language={lang} style={a11yDark}>\r\n        {snippet}\r\n      </SyntaxHighlighter>\r\n    );\r\n  },\r\n};\r\n\r\nfunction Preview(props) {\r\n  const context = useContext(EditorTextContext);\r\n  return (\r\n    <div id=\"preview\">\r\n      <Markdown\r\n        breaks={true}\r\n        value={context.text}\r\n        renderer={renderer}\r\n      ></Markdown>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Preview;\r\n","import React from 'react';\nimport Window from './Components/Window';\nimport Editor from './Components/Editor';\nimport Preview from './Components/Preview';\nimport EditorTextContextProvider from './Context/EditorTextContext.js';\n\nfunction App() {\n  return (\n    <EditorTextContextProvider>\n      <div className=\"App\">\n        <Window name=\"Editor\" content={<Editor />} />\n        <Window name=\"Preview\" content={<Preview />} />\n      </div>\n    </EditorTextContextProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}